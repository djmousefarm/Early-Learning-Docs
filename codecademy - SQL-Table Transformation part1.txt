Codecademy : SQL:Table Transformation




While working with databases, we often need to transform data from one format to achieve a desired result. In SQL, this is often called data transformation or table transformation. 

We'll begin learning about table transformation through subqueries. Subqueries, sometimes referred to as inner queries or nested queries, are used to transform table data by nesting one query within another query.

In this lesson, we'll look at aviation data and transform it with SQL using subqueries. If you're new to SQL, we recommend you do this course first.

Instructions

1. We'll be working with an airport database. Let's begin by looking at the data tables. 

Select ten rows from the flights table.

SELECT *
FROM flights
LIMIT 10;

Let's continue with subqueries. 

Imagine that you are the head of air traffic control. In our airplanes database, you'd like to know which flights had an origin airport with an elevation greater than 2000 feet. We can do this with a subquery. 

We first create an inner query, or subquery, that finds the airports with elevation greater than 2000 from the airports table: 
SELECT code 
  FROM airports 
  WHERE elevation > 2000;


Next, we take the result set of the inner query and use it to filter on the flights table, to find the flight detail that meets the elevation criteria.
SELECT * 
FROM flights 
WHERE origin in (
    SELECT code 
    FROM airports 
    WHERE elevation > 2000);

As shown above, a subquery is nested within another query to give us our desired result.

Instructions

1. Using the same pattern from the example above, find flight information about flights where the origin elevation is less than 2000 feet.

SELECT * 
FROM Flights
WHERE origin in (
	SELECT code
	FROM airports
	WHERE elevation < 2000);


The query we just ran is just one kind of subquery, what we refer to as a non-correlated subquery. A non-correlated subquery is a subquery that can be run independently of the outer query and as we saw, can be used to complete a multi-step transformation. 

Let's try one more non-correlated subquery. Perhaps we'd like to look at a selection of flights whose origin airport is a seaplane base, designated by SEAPLANE_BASE. The facility type of an airport is located in the fac_type field of the airports table.

SELECT * 
FROM flights 
WHERE origin in (
    SELECT code 
    FROM airports 
    WHERE fac_type = 'SEAPLANE_BASE');

Instructions

1.Using the same pattern, find flight information about flights where the Federal Aviation Administration region (faa_region) is the Southern region (ASO). 

SELECT * 
FROM Flights
WHERE origin in (
	SELECT code
	FROM airports
	WHERE faa_region = 'ASO');

The non-correlated subquery examples we've used so far utilized two tables (flights and airports), but we can also perform transformations on a single table. For instance, sometimes we need to aggregate in multiple steps - like taking an average of a count. 

Imagine you’d like to know how many flights there are on average, for all Fridays in a given month from the flights table. First, we’d need to calculate the number of flights per day, and then we’d need to calculate the average based on the daily flight count for each day of the week. We can do this all in one step using a subquery: 

SELECT a.dep_month,
       a.dep_day_of_week,
       AVG(a.flight_count) AS average_flights
  FROM (
        SELECT dep_month,
              dep_day_of_week,
               dep_date,
               COUNT(*) AS flight_count
          FROM flights
         GROUP BY 1,2,3
       ) a
 GROUP BY 1,2
 ORDER BY 1,2;

The inner query provides the count of flights by day, and the outer query uses the inner query’s result set to compute the average by day of week of a given month.

Instructions

1.Using a subquery, find the average total distance flown by day of week and month.

Be sure to alias the outer query as average_distance and the inner query as flight_distance. 

SELECT a.dep_month,
       a.dep_day_of_week,
       AVG(a.flight_distance) AS average_distance
  FROM (
        SELECT dep_month,
              dep_day_of_week,
              dep_date,
               sum(distance) AS flight_distance
          FROM flights
         GROUP BY 1,2,3
       ) a
 GROUP BY 1,2
 ORDER BY 1,2;

We can also write correlated subqueries in SQL. 

In a correlated subquery, the subquery can not be run independently of the outer query. The order of operations is important in a correlated subquery:
1.A row is processed in the outer query. 
2.Then, for that particular row in the outer query, the subquery is executed.

This means that for each row processed by the outer query, the subquery will also be processed for that row. In this example, we will find the list of all flights whose distance is above average for their carrier.

SELECT id
FROM flights AS f
WHERE distance > (
 SELECT AVG(distance)
 FROM flights
 WHERE carrier = f.carrier);

In the above query the inner query has to be re-executed for each flight. Correlated subqueries may appear elsewhere besides the WHERE clause, they can also appear in the SELECT.

Instructions

1.Find the id of the flights whose distance is below average for their carrier. 

SELECT id
FROM flights AS f
WHERE distance < (
 SELECT AVG(distance)
 FROM flights
 WHERE carrier = f.carrier);

It would also be interesting to order flights by giving them a sequence number based on time, by carrier. 

For instance, assuming flight_id increments with each additional flight, we could use the following query to view flights by carrier, flight id, and sequence number:

SELECT carrier, id,
    (SELECT COUNT(*)
FROM flights f
WHERE f.id < flights.id
AND f.carrier=flights.carrier) + 1
 AS flight_sequence_number
FROM flights;

Instructions

1.Using the same pattern, write a query to view flights by origin, flight id, and sequence number. Alias the sequence number column as flight_sequence_number.

SELECT origin, id,
    (SELECT COUNT(*)
FROM flights f
WHERE f.id < flights.id
AND f.origin=flights.origin) + 1
 AS flight_sequence_number
FROM flights;

What can we generalize so far?

- Subqueries are used to complete an SQL transformation by nesting one query within another query. 

- A non-correlated subquery is a subquery that can be run independently of the outer query and can be used to complete a multi-step transformation. 

- A correlated subquery is a subquery that cannot be run independently of the outer query. The order of operations in a correlated subquery is as follows:

1. A row is processed in the outer query. 

2. Then, for that particular row in the outer query, the subquery is executed.

Let's continue exploring table transformation through the union clause. 

Unions allow us to utilize information from multiple tables in our queries. In this lesson, we’ll utilize data from an e-commerce store. Let’s explore the available data we’ll be using.

Instructions

1.In our database, we have products tables that contain metadata about each product in the store. 

Select ten rows from the new_products table.

select *
FROM new_products
LIMIT 10;

